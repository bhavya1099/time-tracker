# ********RoostGPT********

# Test generated by RoostGPT for test test-workflow using AI Type Open AI and AI Model gpt-4
# 
# Feature file generated for /pet_put for http method type PUT 
# RoostTestHash=ec103be570
# 
# 

# ********RoostGPT********
Feature: Pet Store API Tests

Background: 
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase
  * def authToken = karate.properties['auth.token'] || karate.get('authToken', '{{ $processEnvironment.AUTH_TOKEN }}')
  * def authHeader = { Authorization: '#(authToken)' }

Scenario: Update an existing pet
  Given path '/v2/pet'
  And request
  """
  {
    "id": #number,
    "category": {
      "id": #number,
      "name": #string
    },
    "name": "doggie",
    "photoUrls": ["#string"],
    "tags": [
      {
        "id": #number,
        "name": #string
      }
    ],
    "status": #string
  }
  """
  And headers authHeader
  When method put
  Then status 200
  And match response ==
  """
  {
    "id": '#(response.id)',
    "category": {
      "id": '#(response.category.id)',
      "name": '#(response.category.name)'
    },
    "name": '#(response.name)',
    "photoUrls": '#(response.photoUrls)',
    "tags": '#(response.tags)',
    "status": '#(response.status)'
  }
  """
  And match response contains { "id": '#number', "category": { "id": '#number', "name": '#string' }, "name": '#string', "photoUrls": '#array', "tags": '#array', "status": '#string' }
  And match each response.tags contains { "id": '#number', "name": '#string' }

Examples:
  | id | category.id | category.name | name  | photoUrls            | tags.id | tags.name | status |
  | 1  | 1           | 'Dogs'        | 'Tom' | ['url1', 'url2']     | 1       | 'tag1'    | 'sold' |
  | 2  | 2           | 'Cats'        | 'Jerry'| ['url3', 'url4']    | 2       | 'tag2'    | 'available' |
