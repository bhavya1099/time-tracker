# ********RoostGPT********

# Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4
# 
# Feature file generated for /pet_put for http method type PUT 
# RoostTestHash=ec103be570
# 
# 

# ********RoostGPT********
Feature: Pet Store API Tests

Background: 
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase
  * def authToken = karate.properties['auth.token'] || karate.get('authToken', '{{ $processEnvironment.AUTH_TOKEN }}')
  * configure headers = { Authorization: '#(authToken)' }

Scenario: Update an existing pet
  Given path '/v2/pet'
  And request { 
    "id": 1,
    "category": { "id": 1, "name": "Dog" },
    "name": "doggie",
    "photoUrls": ["string"],
    "tags": [{ "id": 1, "name": "tag1" }],
    "status": "available"
  }
  When method put
  Then status 200
  And match response == { "id": '#number', "category": '#object', "name": '#string', "photoUrls": '#array', "tags": '#array', "status": '#string' }
  And match response.id == 1
  And match response.category == { "id": '#number', "name": '#string' }
  And match response.name == 'doggie'
  And match response.photoUrls contains 'string'
  And match response.tags contains { "id": '#number', "name": '#string' }
  And match response.status == 'available'

Scenario: Update pet with invalid ID
  Given path '/v2/pet'
  And request { 
    "id": 'invalid',
    "category": { "id": 1, "name": "Dog" },
    "name": "doggie",
    "photoUrls": ["string"],
    "tags": [{ "id": 1, "name": "tag1" }],
    "status": "available"
  }
  When method put
  Then status 400

Scenario: Update non-existent pet
  Given path '/v2/pet'
  And request { 
    "id": 9999,
    "category": { "id": 1, "name": "Dog" },
    "name": "doggie",
    "photoUrls": ["string"],
    "tags": [{ "id": 1, "name": "tag1" }],
    "status": "available"
  }
  When method put
  Then status 404
