# ********RoostGPT********

# Test generated by RoostGPT for test artilleryTest using AI Type  and AI Model 
# 
# Feature file generated for /kafka/v3/clusters/{cluster_id}/topics/{topic_name}_get for http method type GET 
# RoostTestHash=dc56f44070
# 
# 

# ********RoostGPT********
Feature: Get Kafka Topic

  Background:
    * def urlBase = karate.properties['alias_URL_BASE'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase

  Scenario: Get topic with include_authorized_operations parameter
    Given path '/kafka/v3/clusters/{cluster_id}/topics/{topic_name}'
    And def cluster_id = 'cluster-1'
    And def topic_name = 'topic-1'
    And def include_authorized_operations = true
    And param include_authorized_operations = include_authorized_operations
    When method GET
    Then status 200
    And match response == { kind: '#string', metadata: { self: '#string', resource_name: '#string?' }, cluster_id: '#string', topic_name: '#string', is_internal: '#boolean', replication_factor: '#integer', partitions_count: '#integer', partitions: { related: '#string' }, configs: { related: '#string' }, partition_reassignments: { related: '#string' }, authorized_operations: '#[]string' }

  Scenario: Get topic without include_authorized_operations parameter
    Given path '/kafka/v3/clusters/{cluster_id}/topics/{topic_name}'
    And def cluster_id = 'cluster-1'
    And def topic_name = 'topic-1'
    When method GET
    Then status 200
    And match response == { kind: '#string', metadata: { self: '#string', resource_name: '#string?' }, cluster_id: '#string', topic_name: '#string', is_internal: '#boolean', replication_factor: '#integer', partitions_count: '#integer', partitions: { related: '#string' }, configs: { related: '#string' }, partition_reassignments: { related: '#string' }, authorized_operations: '#[]string' }

  Scenario: Get topic with invalid request body format
    Given path '/kafka/v3/clusters/{cluster_id}/topics/{topic_name}'
    And def cluster_id = 'cluster-1'
    And def topic_name = 'topic-1'
    And request { invalid_property: 'value' }
    When method GET
    Then status 400
    And match response == { id: '#string', status: '#string', code: '#string', title: '#string', detail: '#string', source: { pointer: '#string', parameter: '#string' }, error_code: '#integer', message: '#string?' }

  Scenario: Get topic with authorization failure
    Given path '/kafka/v3/clusters/{cluster_id}/topics/{topic_name}'
    And def cluster_id = 'cluster-1'
    And def topic_name = 'topic-1'
    And header Authorization = 'Bearer REPLACE_AUTH_TOKEN'
    When method GET
    Then status 401
    And match response == { id: '#string', status: '#string', code: '#string', title: '#string', detail: '#string', source: { pointer: '#string', parameter: '#string' }, error_code: '#integer', message: '#string?' }

  Scenario: Get topic with authorization success but authorization failure for operation
    Given path '/kafka/v3/clusters/{cluster_id}/topics/{topic_name}'
    And def cluster_id = 'cluster-1'
    And def topic_name = 'topic-1'
    And header Authorization = 'Bearer REPLACE_AUTH_TOKEN'
    And header authorized_operations = 'READ'
    When method GET
    Then status 403
    And match response == { id: '#string', status: '#string', code: '#string', title: '#string', detail: '#string', source: { pointer: '#string', parameter: '#string' }, error_code: '#integer', message: '#string?' }

  Scenario: Get non-existing topic
    Given path '/kafka/v3/clusters/{cluster_id}/topics/{topic_name}'
    And def cluster_id = 'cluster-1'
    And def topic_name = 'non-existing-topic'
    When method GET
    Then status 404
    And match response == { id: '#string', status: '#string', code: '#string', title: '#string', detail: '#string', source: { pointer: '#string', parameter: '#string' }, error_code: '#integer', message: '#string?' }

  Scenario: Get topic with rate limit reached
    Given path '/kafka/v3/clusters/{cluster_id}/topics/{topic_name}'
    And def cluster_id = 'cluster-1'
    And def topic_name = 'topic-1'
    And header Retry-After = '60'
    When method GET
    Then status 429
    And match response == '#string'

  Scenario: Get topic with internal server error
    Given path '/kafka/v3/clusters/{cluster_id}/topics/{topic_name}'
    And def cluster_id = 'cluster-1'
    And def topic_name = 'topic-1'
    When method GET
    Then status 500
    And match response == { id: '#string', status: '#string', code: '#string', title: '#string', detail: '#string', source: { pointer: '#string', parameter: '#string' }, error_code: '#integer', message: '#string?' }
