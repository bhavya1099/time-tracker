// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Add a valid TimeEntry to the entries list.
   Given that the entries list is initialized and not null,
   When a valid TimeEntry object is passed to the add method,
   Then the TimeEntry object should be added to the entries list successfully.

2. Scenario: Add a null TimeEntry to the entries list.
   Given that the entries list is initialized and not null,
   When a null TimeEntry object is passed to the add method,
   Then an exception should be thrown indicating that a null object cannot be added to the list.

3. Scenario: Add a TimeEntry to a null entries list.
   Given that the entries list is not initialized (it is null),
   When a valid TimeEntry object is passed to the add method,
   Then an exception should be thrown indicating that an object cannot be added to a null list.

4. Scenario: Add duplicate TimeEntry to the entries list.
   Given that the entries list is initialized and not null,
   And it already contains a certain TimeEntry object,
   When the same TimeEntry object is passed to the add method again,
   Then the TimeEntry object should be added to the list as list allows duplicate entries.

5. Scenario: Add multiple TimeEntry objects to the entries list.
   Given that the entries list is initialized and not null,
   When multiple valid TimeEntry objects are passed to the add method,
   Then all the TimeEntry objects should be added to the entries list successfully.

6. Scenario: Add a TimeEntry to a full entries list.
   Given that the entries list is initialized and not null,
   And the list is at its maximum capacity,
   When a valid TimeEntry object is passed to the add method,
   Then an exception should be thrown indicating that no more objects can be added to the list as it is full.
*/

// ********RoostGPT********
package training.taylor.timetracker.core;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.ArrayList;
import java.util.List;

public class Tracker_add_7d27642e21_Test {
    private Tracker tracker;
    private TimeEntry entry1;
    private TimeEntry entry2;

    @BeforeEach
    public void setup() {
        tracker = new Tracker();
        entry1 = new TimeEntry();
        entry2 = new TimeEntry();
    }

    @Test
    public void testAdd_ValidTimeEntry() {
        tracker.add(entry1);
        assertEquals(1, tracker.size());
        assertEquals(entry1, tracker.get(0));
    }

    @Test
    public void testAdd_NullTimeEntry() {
        assertThrows(NullPointerException.class, () -> {
            tracker.add(null);
        });
    }

    @Test
    public void testAdd_ToNullEntriesList() {
        List<TimeEntry> entries = null;
        assertThrows(NullPointerException.class, () -> {
            entries.add(entry1);
        });
    }

    @Test
    public void testAdd_DuplicateTimeEntry() {
        tracker.add(entry1);
        tracker.add(entry1);
        assertEquals(2, tracker.size());
    }

    @Test
    public void testAdd_MultipleTimeEntries() {
        tracker.add(entry1);
        tracker.add(entry2);
        assertEquals(2, tracker.size());
        assertEquals(entry1, tracker.get(0));
        assertEquals(entry2, tracker.get(1));
    }

    @Test
    public void testAdd_ToFullEntriesList() {
        List<TimeEntry> entries = new ArrayList<>(1);
        entries.add(entry1);
        assertThrows(IndexOutOfBoundsException.class, () -> {
            entries.add(2, entry2);
        });
    }
}
