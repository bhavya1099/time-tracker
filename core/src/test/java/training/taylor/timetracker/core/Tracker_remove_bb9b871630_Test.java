// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Removing an existing TimeEntry object from the entries list.
   Given a list of TimeEntry objects in entries,
   When the remove() method is called with a TimeEntry object that exists in the list,
   Then the specified TimeEntry object should be removed from the entries list.

2. Scenario: Removing a non-existing TimeEntry object from the entries list.
   Given a list of TimeEntry objects in entries,
   When the remove() method is called with a TimeEntry object that does not exist in the list,
   Then the entries list should remain unchanged.

3. Scenario: Removing a null object from the entries list.
   Given a list of TimeEntry objects in entries,
   When the remove() method is called with a null object,
   Then a NullPointerException should be thrown.

4. Scenario: Removing a TimeEntry object from an empty list.
   Given an empty list of entries,
   When the remove() method is called with any TimeEntry object,
   Then the entries list should remain unchanged.

5. Scenario: Removing a TimeEntry object from a list containing multiple instances of the same object.
   Given a list of entries containing multiple instances of the same TimeEntry object,
   When the remove() method is called with this TimeEntry object,
   Then only the first occurrence of this TimeEntry object should be removed from the list.

6. Scenario: Removing a TimeEntry object when the entries list is null.
   Given a null entries list,
   When the remove() method is called with any TimeEntry object,
   Then a NullPointerException should be thrown.

7. Scenario: Removing a TimeEntry object from a list with multiple different TimeEntry objects.
   Given a list of entries containing multiple different TimeEntry objects,
   When the remove() method is called with a specific TimeEntry object,
   Then only the specified TimeEntry object should be removed from the list, and all other objects should remain.
*/

// ********RoostGPT********
package training.taylor.timetracker.core;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import training.taylor.timetracker.core.dao.TimeEntry;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class Tracker_remove_bb9b871630_Test {
    @Autowired
    private Tracker tracker;
    private TimeEntry timeEntry1;
    private TimeEntry timeEntry2;

    @BeforeEach
    public void setUp() {
        tracker = new Tracker();
        timeEntry1 = new TimeEntry();
        timeEntry2 = new TimeEntry();
        tracker.add(timeEntry1);
        tracker.add(timeEntry2);
    }

    @Test
    public void testRemoveExistingEntry() {
        tracker.remove(timeEntry1);
        assertEquals(1, tracker.size());
    }

    @Test
    public void testRemoveNonExistingEntry() {
        TimeEntry timeEntry3 = new TimeEntry();
        tracker.remove(timeEntry3);
        assertEquals(2, tracker.size());
    }

    @Test
    public void testRemoveNullEntry() {
        assertThrows(NullPointerException.class, () -> {
            tracker.remove(null);
        });
    }

    @Test
    public void testRemoveFromEmptyList() {
        Tracker emptyTracker = new Tracker();
        TimeEntry timeEntry3 = new TimeEntry();
        emptyTracker.remove(timeEntry3);
        assertEquals(0, emptyTracker.size());
    }

    @Test
    public void testRemoveFromListWithSameEntries() {
        Tracker sameEntriesTracker = new Tracker();
        TimeEntry timeEntry3 = new TimeEntry();
        sameEntriesTracker.add(timeEntry3);
        sameEntriesTracker.add(timeEntry3);
        sameEntriesTracker.remove(timeEntry3);
        assertEquals(1, sameEntriesTracker.size());
    }

    @Test
    public void testRemoveFromNullList() {
        Tracker nullListTracker = new Tracker();
        nullListTracker.entries = null;
        TimeEntry timeEntry3 = new TimeEntry();
        assertThrows(NullPointerException.class, () -> {
            nullListTracker.remove(timeEntry3);
        });
    }

    @Test
    public void testRemoveFromListWithDifferentEntries() {
        Tracker differentEntriesTracker = new Tracker();
        TimeEntry timeEntry3 = new TimeEntry();
        TimeEntry timeEntry4 = new TimeEntry();
        differentEntriesTracker.add(timeEntry3);
        differentEntriesTracker.add(timeEntry4);
        differentEntriesTracker.remove(timeEntry3);
        assertEquals(1, differentEntriesTracker.size());
    }
}
