// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Removing an existing TimeEntry object from the entries list.
   Given a list of TimeEntry objects named entries,
   When the remove() method is called with a TimeEntry object that exists in the entries list,
   Then ensure the TimeEntry object is removed from the entries list.

2. Scenario: Removing a non-existing TimeEntry object from the entries list.
   Given a list of TimeEntry objects named entries,
   When the remove() method is called with a TimeEntry object that does not exist in the entries list,
   Then ensure no exception is thrown and the entries list remains unchanged.

3. Scenario: Removing a TimeEntry object from an empty entries list.
   Given an empty list of TimeEntry objects named entries,
   When the remove() method is called with any TimeEntry object,
   Then ensure no exception is thrown and the entries list remains empty.

4. Scenario: Removing a null from the entries list.
   Given a list of TimeEntry objects named entries,
   When the remove() method is called with a null,
   Then ensure no exception is thrown and the entries list remains unchanged.

5. Scenario: Removing a TimeEntry object from a list containing multiple instances of that object.
   Given a list of TimeEntry objects named entries, where the list contains multiple instances of a particular TimeEntry object,
   When the remove() method is called with that TimeEntry object,
   Then ensure only one instance of that TimeEntry object is removed from the list.

6. Scenario: Removing a TimeEntry object from the entries list when the list contains null values.
   Given a list of TimeEntry objects named entries, where the list contains one or more null values,
   When the remove() method is called with a TimeEntry object,
   Then ensure the TimeEntry object is removed from the list and the null values remain in the list.
*/

// ********RoostGPT********
package training.taylor.timetracker.core;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import training.taylor.timetracker.core.dao.TimeEntry;
import java.util.ArrayList;
import java.util.List;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

public class Tracker_remove_bb9b871630_Test {

    @Mock
    private List<TimeEntry> entries;

    private Tracker tracker;

    // @Before
    // public void setup() {
    //     MockitoAnnotations.initMocks(this);
    //     tracker = new Tracker(entries);
    // }

    @Test
    public void testRemoveExistingEntry() {
        TimeEntry entry = new TimeEntry();
        tracker.add(entry);

        tracker.remove(entry);
        verify(entries, times(2)).remove(entry);
    }

    @Test
    public void testRemoveNonExistingEntry() {
        TimeEntry entry = new TimeEntry();

        tracker.remove(entry);
        verify(entries, times(2)).remove(entry);
    }

    @Test
    public void testRemoveEntryFromEmptyList() {
        TimeEntry entry = new TimeEntry();

        tracker.remove(entry);
        verify(entries, times(2)).remove(entry);
    }

    @Test
    public void testRemoveNullFromList() {
        tracker.remove(null);
        verify(entries, times(2)).remove(null);
    }

    @Test
    public void testRemoveEntryFromListWithMultipleInstances() {
        TimeEntry entry = new TimeEntry();
        tracker.add(entry);
        tracker.add(entry);

        tracker.remove(entry);
        verify(entries, times(2)).remove(entry);
    }

    @Test
    public void testRemoveEntryFromListWithNullValues() {
        tracker.add(null);
        TimeEntry entry = new TimeEntry();
        tracker.add(entry);

        tracker.remove(entry);
        verify(entries, times(2)).remove(entry);
    }
}
