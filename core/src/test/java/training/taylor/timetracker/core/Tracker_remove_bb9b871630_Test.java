// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Removing an existing TimeEntry object from the entries list.
   Given a list of TimeEntry objects in entries,
   When the remove() method is called with a TimeEntry object that exists in the list,
   Then the specified TimeEntry object should be removed from the entries list.

2. Scenario: Removing a non-existing TimeEntry object from the entries list.
   Given a list of TimeEntry objects in entries,
   When the remove() method is called with a TimeEntry object that does not exist in the list,
   Then the entries list should remain unchanged.

3. Scenario: Removing a null TimeEntry object from the entries list.
   Given a list of TimeEntry objects in entries,
   When the remove() method is called with a null,
   Then a NullPointerException should be thrown.

4. Scenario: Removing a TimeEntry object from an empty list.
   Given an empty list of TimeEntry objects in entries,
   When the remove() method is called with a TimeEntry object,
   Then the entries list should remain empty.

5. Scenario: Removing a TimeEntry object from a list with multiple identical TimeEntry objects.
   Given a list of TimeEntry objects in entries with multiple identical TimeEntry objects,
   When the remove() method is called with one of these identical TimeEntry objects,
   Then only one instance of the specified TimeEntry object should be removed from the list.

6. Scenario: Removing a TimeEntry object when the entries list is null.
   Given a null entries list,
   When the remove() method is called with a TimeEntry object,
   Then a NullPointerException should be thrown.
*/

// ********RoostGPT********
package training.taylor.timetracker.core;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import training.taylor.timetracker.core.dao.TimeEntry;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class Tracker_remove_bb9b871630_Test {
    Tracker tracker;
    TimeEntry entry1;
    TimeEntry entry2;

    @BeforeEach
    public void setup() {
        tracker = new Tracker();
        entry1 = Mockito.mock(TimeEntry.class);
        entry2 = Mockito.mock(TimeEntry.class);
    }

    @Test
    public void testRemoveExistingEntry() {
        tracker.add(entry1);
        tracker.remove(entry1);
        assertEquals(0, tracker.size());
    }

    @Test
    public void testRemoveNonExistingEntry() {
        tracker.add(entry1);
        tracker.remove(entry2);
        assertEquals(1, tracker.size());
    }

    @Test
    public void testRemoveNullEntry() {
        tracker.add(entry1);
        assertThrows(NullPointerException.class, () -> tracker.remove(null));
    }

    @Test
    public void testRemoveEntryFromEmptyList() {
        assertThrows(IndexOutOfBoundsException.class, () -> tracker.remove(entry1));
    }

    @Test
    public void testRemoveIdenticalEntries() {
        tracker.add(entry1);
        tracker.add(entry1);
        tracker.remove(entry1);
        assertEquals(1, tracker.size());
    }

    @Test
    public void testRemoveEntryFromNullList() {
        tracker = new Tracker();
        //tracker.entries = null;

        assertThrows(NullPointerException.class, () -> tracker.remove(entry1));
    }
}
