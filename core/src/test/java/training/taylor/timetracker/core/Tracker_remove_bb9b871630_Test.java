// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Removing an existing entry
   Description: Validate if a specific TimeEntry that exists in the entries list is removed successfully.

2. Scenario: Removing a non-existing entry
   Description: Validate the behavior of the remove function when a TimeEntry that does not exist in the entries list is passed.

3. Scenario: Removing entry from an empty list
   Description: Validate the behavior of the remove function when the entries list is empty.

4. Scenario: Removing a null entry
   Description: Validate the behavior of the remove function when a null TimeEntry is passed.

5. Scenario: Removing an entry from a list with duplicate entries
   Description: Validate the behavior of the remove function when the entries list contains duplicate entries. The function should only remove one instance of the entry.

6. Scenario: Multiple removal of the same entry
   Description: Validate the behavior of the remove function when the same entry is removed multiple times. The function should handle the scenario gracefully without throwing an exception.

7. Scenario: Removing entry in a list with multiple data types
   Description: Validate the behavior of the remove function when the entries list contains different data types. The function should only remove the TimeEntry object and leave other data types intact.

8. Scenario: Removing an entry from a large list
   Description: Validate performance and behavior of the remove function when the entries list is very large.

9. Scenario: Removing an entry with special characters or numbers
   Description: Validate the behavior of the remove function when the TimeEntry passed contains special characters or numbers.

10. Scenario: Removing entry when another operation is being performed on the list
    Description: Validate the behavior of the remove function when another operation (like adding an entry, sorting the list, etc.) is being performed on the entries list concurrently.
*/

// ********RoostGPT********
package training.taylor.timetracker.core;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import training.taylor.timetracker.core.dao.TimeEntry;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class Tracker_remove_bb9b871630_Test {
    Tracker tracker;
    @Mock
    TimeEntry timeEntry1;
    @Mock
    TimeEntry timeEntry2;
    @Mock
    TimeEntry timeEntry3;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        tracker = new Tracker();
    }

    @Test
    public void testRemoveExistingEntry() {
        List<TimeEntry> entries = new ArrayList<>();
        entries.add(timeEntry1);
        tracker.add(timeEntry1);
        tracker.remove(timeEntry1);
        assertEquals(0, tracker.size());
    }

    @Test
    public void testRemoveNonExistingEntry() {
        tracker.add(timeEntry1);
        tracker.remove(timeEntry2);
        assertEquals(1, tracker.size());
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testRemoveEntryFromEmptyList() {
        tracker.remove(timeEntry1);
    }

    @Test
    public void testRemoveNullEntry() {
        tracker.add(timeEntry1);
        tracker.remove(null);
        assertEquals(1, tracker.size());
    }

    @Test
    public void testRemoveEntryFromListWithDuplicates() {
        tracker.add(timeEntry1);
        tracker.add(timeEntry1);
        tracker.remove(timeEntry1);
        assertEquals(1, tracker.size());
    }

    @Test
    public void testMultipleRemovalOfSameEntry() {
        tracker.add(timeEntry1);
        tracker.remove(timeEntry1);
        tracker.remove(timeEntry1);
        assertEquals(0, tracker.size());
    }

    @Test
    public void testRemoveEntryFromListWithMultipleDataTypes() {
        tracker.add(timeEntry1);
        tracker.add(timeEntry2);
        tracker.remove(timeEntry1);
        assertEquals(1, tracker.size());
    }

    @Test
    public void testRemoveEntryFromLargeList() {
        for (int i = 0; i < 10000; i++) {
            tracker.add(timeEntry1);
        }
        tracker.remove(timeEntry1);
        assertEquals(9999, tracker.size());
    }

    @Test
    public void testRemoveEntryWithSpecialCharactersOrNumbers() {
        tracker.add(timeEntry1);
        tracker.remove(timeEntry1);
        assertEquals(0, tracker.size());
    }

    @Test
    public void testRemoveEntryWhenAnotherOperationIsBeingPerformedOnList() {
        tracker.add(timeEntry1);
        tracker.add(timeEntry2);
        new Thread(() -> tracker.remove(timeEntry1)).start();
        tracker.remove(timeEntry2);
        assertEquals(0, tracker.size());
    }
}
