// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Empty List
- In this scenario, we will validate that the size function returns 0 when the list of entries is empty.

Test Scenario 2: Single Entry in List
- Here, we will validate that the size function returns 1 when there is only one entry in the list.

Test Scenario 3: Multiple Entries in List
- In this test scenario, we will validate that the size function returns the correct count when there are multiple entries in the list.

Test Scenario 4: Null List
- This test scenario will validate that the size function handles a null list appropriately. Depending on the implementation, this could either throw an exception or return 0.

Test Scenario 5: List with Null Entries
- In this scenario, we will validate the behavior of the size function when the list contains one or more null entries. The expected behavior would be to count these null entries as valid elements, thus increasing the size of the list.

Test Scenario 6: Large Number of Entries in List
- This test scenario will validate that the size function can handle a large number of entries in the list and return the correct count.

Test Scenario 7: Concurrent Modification of List
- In this scenario, we will validate the behavior of the size function when the list is being modified concurrently. This could either throw a ConcurrentModificationException or it could return an inconsistent size.
*/

// ********RoostGPT********
package training.taylor.timetracker.core;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import training.taylor.timetracker.core.dao.TimeEntry;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentModificationException;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

public class Tracker_size_83d847afcf_Test {

    private Tracker tracker;

    @Mock
    private List<TimeEntry> entries;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        tracker = new Tracker();
        tracker.entries = entries;
    }

    @Test
    public void testSize_EmptyList() {
        when(entries.size()).thenReturn(0);
        assertEquals(0, tracker.size());
    }

    @Test
    public void testSize_SingleEntry() {
        when(entries.size()).thenReturn(1);
        assertEquals(1, tracker.size());
    }

    @Test
    public void testSize_MultipleEntries() {
        when(entries.size()).thenReturn(5);
        assertEquals(5, tracker.size());
    }

    @Test(expected = NullPointerException.class)
    public void testSize_NullList() {
        tracker.entries = null;
        tracker.size();
    }

    @Test
    public void testSize_NullEntries() {
        List<TimeEntry> listWithNulls = new ArrayList<>();
        listWithNulls.add(null);
        tracker.entries = listWithNulls;
        assertEquals(1, tracker.size());
    }

    @Test
    public void testSize_LargeNumberEntries() {
        when(entries.size()).thenReturn(10000);
        assertEquals(10000, tracker.size());
    }

    @Test(expected = ConcurrentModificationException.class)
    public void testSize_ConcurrentModification() {
        when(entries.size()).thenThrow(new ConcurrentModificationException());
        tracker.size();
    }
}
