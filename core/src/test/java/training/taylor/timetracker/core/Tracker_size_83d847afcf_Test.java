// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Verify the size function returns the correct size of the entries list.

Test Case: Create a list of TimeEntry objects and check if the size() function returns the correct size.

2. Scenario: Verify the size function returns 0 for an empty list.

Test Case: Call the size() function on an empty list of TimeEntry objects and verify if it returns 0.

3. Scenario: Verify the size function handles null value.

Test Case: Call the size() function on a null list of TimeEntry objects and verify if it throws NullPointerException.

4. Scenario: Verify the size function after adding new TimeEntry objects.

Test Case: Add a new TimeEntry object to the list and call the size() function to check if the size is incremented by 1.

5. Scenario: Verify the size function after removing TimeEntry objects.

Test Case: Remove a TimeEntry object from the list and call the size() function to check if the size is decreased by 1.

6. Scenario: Verify the size function with a large number of TimeEntry objects.

Test Case: Add a large number of TimeEntry objects in the list and verify if the size() function returns the correct count.

7. Scenario: Verify the size function performance.

Test Case: Measure the time taken by the size() function to return the size of a large list and verify if it meets the performance requirements.
*/

// ********RoostGPT********
package training.taylor.timetracker.core;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.when;
import java.util.List;
import training.taylor.timetracker.core.dao.TimeEntry;

public class Tracker_size_83d847afcf_Test {
    private Tracker tracker;

    @Mock
    private List<TimeEntry> entries;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        tracker = new Tracker();
        tracker.setEntries(entries);
    }

    @Test
    public void testSizeMethodReturnsCorrectSize() {
        when(entries.size()).thenReturn(5);
        assertEquals(5, tracker.size());
    }

    @Test
    public void testSizeMethodReturnsZeroForEmptyList() {
        when(entries.size()).thenReturn(0);
        assertEquals(0, tracker.size());
    }

    @Test(expected = NullPointerException.class)
    public void testSizeMethodHandlesNullValue() {
        when(entries.size()).thenThrow(new NullPointerException());
        tracker.size();
    }

    @Test
    public void testSizeMethodAfterAddingNewTimeEntry() {
        TimeEntry timeEntry = new TimeEntry();
        when(entries.size()).thenReturn(5, 6);
        tracker.add(timeEntry);
        assertEquals(6, tracker.size());
    }

    @Test
    public void testSizeMethodAfterRemovingTimeEntry() {
        TimeEntry timeEntry = new TimeEntry();
        when(entries.size()).thenReturn(5, 4);
        tracker.remove(timeEntry);
        assertEquals(4, tracker.size());
    }

    @Test
    public void testSizeMethodWithLargeNumberOfTimeEntries() {
        when(entries.size()).thenReturn(10000);
        assertEquals(10000, tracker.size());
    }

    @Test
    public void testSizeMethodPerformance() {
        long startTime = System.currentTimeMillis();
        when(entries.size()).thenReturn(1000000);
        tracker.size();
        long elapsedTime = System.currentTimeMillis() - startTime;
        assertTrue(elapsedTime < 100);
    }
}
