// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

ROOST_TEST_HASH=size_6a695c1148

================================VULNERABILITIES================================
Vulnerability:NullPointerException
Issue: If the 'entries' object is null, calling 'size()' on it will result in a NullPointerException.
Solution: Add a null check before calling 'size()' to prevent this exception.

================================================================================
1. Scenario: Validate that the size() function returns the correct size of the time entry list when the list is not empty.
   Test Steps:
   - Initialize a list of TimeEntry objects with a known number of entries.
   - Call the size() function.
   - Check if the returned size is equal to the known number of entries.

2. Scenario: Validate that the size() function returns 0 when the list is empty.
   Test Steps:
   - Initialize an empty list of TimeEntry objects.
   - Call the size() function.
   - Check if the returned size is 0.

3. Scenario: Validate that the size() function works correctly after adding a new time entry.
   Test Steps:
   - Initialize a list of TimeEntry objects with a known number of entries.
   - Add a new TimeEntry object to the list.
   - Call the size() function.
   - Check if the returned size is equal to the known number of entries plus one.

4. Scenario: Validate that the size() function works correctly after removing a time entry.
   Test Steps:
   - Initialize a list of TimeEntry objects with a known number of entries.
   - Remove a TimeEntry object from the list.
   - Call the size() function.
   - Check if the returned size is equal to the known number of entries minus one.

5. Scenario: Validate that the size() function handles null lists correctly.
   Test Steps:
   - Initialize a null list of TimeEntry objects.
   - Call the size() function.
   - Check if the returned size is 0 or an appropriate exception is thrown.

6. Scenario: Validate that the size() function works correctly with a large number of entries.
   Test Steps:
   - Initialize a list of TimeEntry objects with a large number of entries (e.g., 10,000).
   - Call the size() function.
   - Check if the returned size is equal to the large number of entries.

7. Scenario: Validate that the size() function works correctly when called multiple times in a row.
   Test Steps:
   - Initialize a list of TimeEntry objects with a known number of entries.
   - Call the size() function multiple times.
   - Check if the returned size is consistent across all calls.
*/

// ********RoostGPT********
package training.taylor.timetracker.core;

import org.junit.Before;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import training.taylor.timetracker.core.dao.TimeEntry;
import static org.junit.Assert.assertEquals;

public class Tracker_size_83d847afcf_Test {

    @Autowired
    private Tracker tracker;
    private TimeEntry entry;

    @Before
    public void setup() {
        entry = new TimeEntry();
        tracker = new Tracker();
    }

    @Test
    public void testSizeForNonEmptyList() {
        tracker.add(entry);
        assertEquals(1, tracker.size());
    }

    @Test
    public void testSizeForEmptyList() {
        assertEquals(0, tracker.size());
    }

    @Test
    public void testSizeAfterAddingEntry() {
        tracker.add(entry);
        assertEquals(1, tracker.size());
    }

    @Test
    public void testSizeAfterRemovingEntry() {
        tracker.add(entry);
        tracker.remove(entry);
        assertEquals(0, tracker.size());
    }

    @Test(expected = NullPointerException.class)
    public void testSizeForNullList() {
        tracker = null;
        tracker.size();
    }

    @Test
    public void testSizeForLargeNumberOfEntries() {
        for(int i=0; i<10000; i++) {
            tracker.add(entry);
        }
        assertEquals(10000, tracker.size());
    }

    @Test
    public void testSizeCalledMultipleTimes() {
        tracker.add(entry);
        assertEquals(1, tracker.size());
        assertEquals(1, tracker.size());
        assertEquals(1, tracker.size());
    }

}
