// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Empty List
   Given that "entries" is an empty list
   When the "size" method is called
   Then it should return 0.

2. Scenario: Single Item in List
   Given that "entries" has only one TimeEntry object
   When the "size" method is called
   Then it should return 1.

3. Scenario: Multiple Items in List
   Given that "entries" has multiple TimeEntry objects
   When the "size" method is called
   Then it should return the exact number of entries in the list.

4. Scenario: Null List
   Given that "entries" is null
   When the "size" method is called
   Then it should throw a NullPointerException.

5. Scenario: List Contains Null Entries
   Given that "entries" contains one or more null values
   When the "size" method is called
   Then it should return the total number of entries including null values.

6. Scenario: Adding New Item to List
   Given that "entries" has n TimeEntry objects already
   When a new TimeEntry object is added to the list
   And the "size" method is called
   Then it should return n+1.

7. Scenario: Removing an Item from List
   Given that "entries" has n TimeEntry objects
   When one TimeEntry object is removed from the list
   And the "size" method is called
   Then it should return n-1.
*/

// ********RoostGPT********
package training.taylor.timetracker.core;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import training.taylor.timetracker.core.dao.TimeEntry;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class Tracker_size_83d847afcf_Test {

    private Tracker tracker;
    private List<TimeEntry> entries;

    @BeforeEach
    public void setUp() {
        entries = new ArrayList<>();
        tracker = Mockito.spy(new Tracker());
        Mockito.doReturn(entries).when(tracker).getEntries();
    }

    @Test
    public void testSize_EmptyList() {
        assertEquals(0, tracker.size());
    }

    @Test
    public void testSize_SingleItemInList() {
        entries.add(Mockito.mock(TimeEntry.class));
        assertEquals(1, tracker.size());
    }

    @Test
    public void testSize_MultipleItemsInList() {
        entries.add(Mockito.mock(TimeEntry.class));
        entries.add(Mockito.mock(TimeEntry.class));
        assertEquals(2, tracker.size());
    }

    @Test
    public void testSize_NullList() {
        Mockito.doReturn(null).when(tracker).getEntries();
        assertThrows(NullPointerException.class, () -> tracker.size());
    }

    @Test
    public void testSize_ListContainsNullEntries() {
        entries.add(null);
        assertEquals(1, tracker.size());
    }

    @Test
    public void testSize_AddingNewItemToList() {
        entries.add(Mockito.mock(TimeEntry.class));
        int initialSize = tracker.size();
        entries.add(Mockito.mock(TimeEntry.class));
        assertEquals(initialSize + 1, tracker.size());
    }

    @Test
    public void testSize_RemovingItemFromList() {
        TimeEntry entry = Mockito.mock(TimeEntry.class);
        entries.add(entry);
        int initialSize = tracker.size();
        entries.remove(entry);
        assertEquals(initialSize - 1, tracker.size());
    }

}
