// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Empty List
   Given that "entries" is an empty list
   When the "size" method is called
   Then it should return 0.

2. Scenario: Single Item in List
   Given that "entries" is a list containing one TimeEntry object
   When the "size" method is called
   Then it should return 1.

3. Scenario: Multiple Items in List
   Given that "entries" is a list containing multiple TimeEntry objects
   When the "size" method is called
   Then it should return the number of items in the list.

4. Scenario: Null List
   Given that "entries" is null
   When the "size" method is called
   Then it should throw a NullPointerException.

5. Scenario: List with Null Entries
   Given that "entries" is a list containing one or more null values
   When the "size" method is called
   Then it should return the total count of items including the null values.

6. Scenario: List with Duplicate Entries
   Given that "entries" is a list containing duplicate TimeEntry objects
   When the "size" method is called
   Then it should return the total count of items including the duplicates.

7. Scenario: Large List
   Given that "entries" is a list containing a large number of TimeEntry objects (ex. 10000)
   When the "size" method is called
   Then it should return the total count of items and not cause any performance issues.

8. Scenario: Concurrent Modification
   Given that "entries" is being modified by another thread while the "size" method is being called
   Then it should return a consistent size value and handle the concurrent modification gracefully.
*/

// ********RoostGPT********
package training.taylor.timetracker.core;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import training.taylor.timetracker.core.dao.TimeEntry;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentModificationException;

import static org.junit.jupiter.api.Assertions.*;

public class Tracker_size_83d847afcf_Test {

    private Tracker tracker;
    private TimeEntry timeEntry;

    @BeforeEach
    public void setUp() {
        tracker = new Tracker();
        timeEntry = new TimeEntry();
    }

    @Test
    public void testSizeWhenListIsEmpty() {
        assertEquals(0, tracker.size());
    }

    @Test
    public void testSizeWhenListHasSingleItem() {
        tracker.add(timeEntry);
        assertEquals(1, tracker.size());
    }

    @Test
    public void testSizeWhenListHasMultipleItems() {
        tracker.add(timeEntry);
        tracker.add(timeEntry);
        assertEquals(2, tracker.size());
    }

    @Test
    public void testSizeWhenListIsNull() {
        tracker = null;
        assertThrows(NullPointerException.class, () -> tracker.size());
    }

    @Test
    public void testSizeWhenListContainsNullEntries() {
        List<TimeEntry> entries = new ArrayList<>();
        entries.add(null);
        entries.add(timeEntry);
        assertEquals(2, tracker.size());
    }

    @Test
    public void testSizeWhenListContainsDuplicateItems() {
        tracker.add(timeEntry);
        tracker.add(timeEntry);
        assertEquals(2, tracker.size());
    }

    @Test
    public void testSizeWhenListIsLarge() {
        for (int i = 0; i < 10000; i++) {
            tracker.add(timeEntry);
        }
        assertEquals(10000, tracker.size());
    }

    @Test
    public void testSizeWhenConcurrentModificationOccurs() {
        new Thread(() -> tracker.add(timeEntry)).start();
        assertThrows(ConcurrentModificationException.class, () -> tracker.size());
    }
}
