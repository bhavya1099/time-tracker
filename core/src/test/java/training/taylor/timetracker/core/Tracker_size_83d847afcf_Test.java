// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Empty List
   Description: Validate the function when the 'entries' list is empty. The expected return value should be 0.

2. Scenario: Non-Empty List
   Description: Validate the function when the 'entries' list is not empty. Add a few TimeEntry objects to the list and verify if the size returned is equal to the number of objects added.

3. Scenario: List With Null Entries
   Description: Validate the function when the 'entries' list contains null entries. Add a few null values to the list and verify if the size returned includes those null entries.

4. Scenario: List Size After Removing Entries
   Description: Validate the function when entries are removed from the 'entries' list. Add a few TimeEntry objects, remove some, and verify if the size returned is as expected.

5. Scenario: List Size After Clearing the List
   Description: Validate the function when all entries are cleared from the 'entries' list. Add a few TimeEntry objects, clear the list, and verify if the size returned is 0.

6. Scenario: Concurrent Modifications
   Description: Validate the function when the 'entries' list is modified concurrently. This will test how the function behaves under multi-threaded conditions. It's expected that the function should throw a ConcurrentModificationException if the list is structurally modified at any time after the iterator has been created, in any way except through the iterator's own remove or add methods.

7. Scenario: List Size with Duplicate Entries
   Description: Validate the function when the 'entries' list contains duplicate TimeEntry objects. Add a few duplicate objects to the list and verify if the size returned includes those duplicates.

8. Scenario: Large List
   Description: Validate the function when the 'entries' list is very large. This will help in understanding how the function performs under load and if there are any performance issues.
*/

// ********RoostGPT********
package training.taylor.timetracker.core;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import training.taylor.timetracker.core.dao.TimeEntry;

import java.util.ArrayList;
import java.util.List;
import java.util.ConcurrentModificationException;

import static org.junit.Assert.*;

public class Tracker_size_83d847afcf_Test {
    private Tracker tracker;
    private List<TimeEntry> entries;

    @Before
    public void setup() {
        entries = new ArrayList<>();
        tracker = Mockito.spy(new Tracker());
        Mockito.doReturn(entries).when(tracker).getEntries();
    }

    @Test
    public void testSize_EmptyList() {
        assertEquals(0, tracker.size());
    }

    @Test
    public void testSize_NonEmptyList() {
        entries.add(Mockito.mock(TimeEntry.class));
        entries.add(Mockito.mock(TimeEntry.class));
        assertEquals(2, tracker.size());
    }

    @Test
    public void testSize_ListWithNullEntries() {
        entries.add(null);
        entries.add(null);
        assertEquals(2, tracker.size());
    }

    @Test
    public void testSize_ListSizeAfterRemovingEntries() {
        TimeEntry entry = Mockito.mock(TimeEntry.class);
        entries.add(entry);
        entries.add(Mockito.mock(TimeEntry.class));
        entries.remove(entry);
        assertEquals(1, tracker.size());
    }

    @Test
    public void testSize_ListSizeAfterClearingList() {
        entries.add(Mockito.mock(TimeEntry.class));
        entries.clear();
        assertEquals(0, tracker.size());
    }

    @Test(expected = ConcurrentModificationException.class)
    public void testSize_ConcurrentModifications() {
        new Thread(() -> entries.add(Mockito.mock(TimeEntry.class))).start();
        tracker.size();
    }

    @Test
    public void testSize_ListSizeWithDuplicateEntries() {
        TimeEntry entry = Mockito.mock(TimeEntry.class);
        entries.add(entry);
        entries.add(entry);
        assertEquals(2, tracker.size());
    }

    @Test
    public void testSize_LargeList() {
        for (int i = 0; i < 10000; i++) {
            entries.add(Mockito.mock(TimeEntry.class));
        }
        assertEquals(10000, tracker.size());
    }
}
