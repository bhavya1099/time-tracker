// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Validate that the `get` method returns the correct `TimeEntry` object at the given index.
   Test Steps:
   - Create a list of `TimeEntry` objects.
   - Call the `get` method with an index.
   - Verify that the returned `TimeEntry` object is the same as the one at the given index in the list.

2. Scenario: Validate that the `get` method throws an `IndexOutOfBoundsException` when the index is out of bounds.
   Test Steps:
   - Create a list of `TimeEntry` objects.
   - Call the `get` method with an index that is out of bounds.
   - Verify that an `IndexOutOfBoundsException` is thrown.

3. Scenario: Validate that the `get` method returns null when the list is empty.
   Test Steps:
   - Call the `get` method on an empty list.
   - Verify that `null` is returned.

4. Scenario: Validate that the `get` method throws a `NullPointerException` when the list is null.
   Test Steps:
   - Call the `get` method on a null list.
   - Verify that a `NullPointerException` is thrown.

5. Scenario: Validate that the `get` method handles exceptions properly.
   Test Steps:
   - Create a scenario where an exception is thrown in the `try` block.
   - Call the `get` method.
   - Verify that the exception is caught and handled properly.

6. Scenario: Validate that the `valid` boolean variable works correctly.
   Test Steps:
   - Call the `get` method and check the `valid` variable.
   - Verify that the `valid` variable is `true` after the `get` method is called.

7. Scenario: Validate that the `get` method handles negative index values.
   Test Steps:
   - Call the `get` method with a negative index value.
   - Verify that an `IndexOutOfBoundsException` is thrown.
*/

// ********RoostGPT********
package training.taylor.timetracker.core;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import training.taylor.timetracker.core.dao.TimeEntry;

import java.util.ArrayList;
import java.util.List;

public class Tracker_get_1b945bb04e_Test {
    private Tracker tracker;
    private TimeEntry timeEntry1, timeEntry2;

    @BeforeEach
    public void setUp() {
        tracker = new Tracker();
        timeEntry1 = new TimeEntry();
        timeEntry2 = new TimeEntry();
        tracker.add(timeEntry1);
        tracker.add(timeEntry2);
    }

    @Test
    public void testGetReturnsCorrectTimeEntry() {
        assertEquals(timeEntry1, tracker.get(0));
        assertEquals(timeEntry2, tracker.get(1));
    }

    @Test
    public void testGetThrowsIndexOutOfBoundsException() {
        assertThrows(IndexOutOfBoundsException.class, () -> {
            tracker.get(3);
        });
    }

    @Test
    public void testGetReturnsNullWhenListIsEmpty() {
        tracker = new Tracker();
        assertNull(tracker.get(0));
    }

    @Test
    public void testGetThrowsNullPointerExceptionWhenListIsNull() {
        tracker = null;
        assertThrows(NullPointerException.class, () -> {
            tracker.get(0);
        });
    }

    @Test
    public void testGetHandlesExceptionsProperly() {
        List<TimeEntry> entries = new ArrayList<>();
        entries.add(timeEntry1);
        entries.add(null);
        assertDoesNotThrow(() -> entries.get(1));
    }

    @Test
    public void testValidVariableWorksCorrectly() {
        assertNotNull(tracker.get(0));
    }

    @Test
    public void testGetHandlesNegativeIndexValues() {
        assertThrows(IndexOutOfBoundsException.class, () -> {
            tracker.get(-1);
        });
    }
}
