// ********RoostGPT********
/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Validate that the `get` method returns the correct `TimeEntry` object at the given index.
   Test Steps:
   - Create a list of `TimeEntry` objects.
   - Call the `get` method with an index.
   - Verify that the returned `TimeEntry` object is the same as the one at the given index in the list.

2. Scenario: Validate that the `get` method throws an `IndexOutOfBoundsException` when the index is out of bounds.
   Test Steps:
   - Create a list of `TimeEntry` objects.
   - Call the `get` method with an index that is out of bounds.
   - Verify that an `IndexOutOfBoundsException` is thrown.

3. Scenario: Validate that the `get` method does not throw any exception when the index is within bounds.
   Test Steps:
   - Create a list of `TimeEntry` objects.
   - Call the `get` method with an index that is within bounds.
   - Verify that no exceptions are thrown.

4. Scenario: Validate that the `get` method returns null when the list of `TimeEntry` objects is empty.
   Test Steps:
   - Create an empty list of `TimeEntry` objects.
   - Call the `get` method with any index.
   - Verify that the returned value is null.

5. Scenario: Validate that the `valid` boolean value does not affect the result of the `get` method.
   Test Steps:
   - Create a list of `TimeEntry` objects.
   - Set `valid` to `true` or `false`.
   - Call the `get` method with an index.
   - Verify that the returned `TimeEntry` object is the same as the one at the given index in the list regardless of the `valid` value.

6. Scenario: Validate that the `get` method handles exceptions correctly.
   Test Steps:
   - Create a list of `TimeEntry` objects.
   - Throw an exception inside the `try` block of the `get` method.
   - Verify that the exception is caught and handled correctly in the `catch` block.

7. Scenario: Validate that the `get` method returns the last `TimeEntry` object when the index is equal to the size of the list.
   Test Steps:
   - Create a list of `TimeEntry` objects.
   - Call the `get` method with an index equal to the size of the list.
   - Verify that the returned `TimeEntry` object is the same as the last one in the list.
*/

// ********RoostGPT********
package training.taylor.timetracker.core;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import org.mockito.Mockito;
import java.util.ArrayList;
import java.util.List;
import training.taylor.timetracker.core.dao.TimeEntry;

public class Tracker_get_1b945bb04e_Test {
    private Tracker tracker;
    private List<TimeEntry> entries;

    @Before
    public void setup() {
        tracker = new Tracker();
        entries = new ArrayList<>();
        for (int i = 0; i < 5; i++) {
            entries.add(Mockito.mock(TimeEntry.class));
        }
        tracker.entries = entries;
    }

    @Test
    public void testGetReturnsCorrectTimeEntry() {
        assertEquals(entries.get(0), tracker.get(0));
        assertEquals(entries.get(3), tracker.get(3));
    }

    @Test(expected = IndexOutOfBoundsException.class)
    public void testGetThrowsExceptionWhenIndexOutOfBounds() {
        tracker.get(6);
    }

    @Test
    public void testGetDoesNotThrowExceptionWhenIndexWithinBounds() {
        tracker.get(4);
    }

    @Test
    public void testGetReturnsNullWhenListIsEmpty() {
        tracker.entries = new ArrayList<>();
        assertNull(tracker.get(0));
    }

    @Test
    public void testGetReturnsCorrectTimeEntryRegardlessOfValidValue() {
        tracker.valid = true;
        assertEquals(entries.get(0), tracker.get(0));
        tracker.valid = false;
        assertEquals(entries.get(0), tracker.get(0));
    }

    @Test
    public void testGetHandlesExceptionsCorrectly() {
        tracker.entries = Mockito.mock(List.class);
        Mockito.when(tracker.entries.get(Mockito.anyInt())).thenThrow(new RuntimeException());
        assertNull(tracker.get(0));
    }

    @Test
    public void testGetReturnsLastTimeEntryWhenIndexIsEqualToListSize() {
        assertEquals(entries.get(entries.size() - 1), tracker.get(entries.size() - 1));
    }
}
